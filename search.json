[{"path":"https://urswilke.github.io/ggbenjamini/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 ggbenjamini authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/articles/create_benjamini_polygons.html","id":"béziers","dir":"Articles","previous_headings":"","what":"Béziers","title":"Create polygons from benjamini leaves","text":"Now ’ll create data structure consisting multiple bezier curves can use grow branches (DON’T TRY UNDERSTAND CODE! ’M SURE MUCH BETTER…): Now can grow leaves branches: plot bezier curves ggplot2, can color outlines different elements:  Quite messy, lines! order leaves cover ’s , look following section.","code":"size <- 160 # df_branches <- tibble( #   x = sample(1:size, 20, replace = TRUE),  #   y = sample(1:size, 20, replace = TRUE),  #   i_branch = rep(1:5, each = 4) # ) xo = seq(-size/2, size/2, by = size/8) * 0.8 xm1 = xo * 0.75 - size/4 xm2 = xo * 0.75 + size/4 xu = xo * 0.5 y = rep(c(0.9, 0.5, 0.5, 0.1) * size, length(xo)) f <- function(xu, xm1, xm2, xo, y) {   tibble(xu, xm1, xm2, xo) %>%      mutate(i_branch = row_number()) %>%      pivot_longer(-i_branch, values_to = \"x\") %>%      mutate(y = y) %>%      mutate() } df_branches <- f(xu, xm1, xm2, xo, y) %>%    mutate(x = x + size/2) %>%    mutate_at(     c(\"x\", \"y\"),      ~ .x + sample(       (-size/20):(size/20),        length(xo),        replace = FALSE     )   ) df_branches #> # A tibble: 36 × 4 #>    i_branch name      x     y #>       <int> <chr> <dbl> <dbl> #>  1        1 xu       54   149 #>  2        1 xm1     -14    77 #>  3        1 xm2      77    80 #>  4        1 xo       23    17 #>  5        2 xu       57   146 #>  6        2 xm1      -3    76 #>  7        2 xm2      81    74 #>  8        2 xo       28    22 #>  9        3 xu       59   152 #> 10        3 xm1      22    85 #> # … with 26 more rows df_branches_and_leaves <- df_branches %>%    group_split(i_branch) %>%    map_dfr(     ~benjamini_branch(df_branch = .x[c(\"x\", \"y\")]),     .id = \"i_branch\"   ) df_branches_and_leaves %>%   unite(idx, i_branch, i_leaf, i_part, element, remove = FALSE) %>%    ggplot(aes(x = x, y = y, group = idx, color = factor(i_branch))) +    geom_bezier(show.legend = FALSE) +   scale_y_reverse() +   theme_void()"},{"path":"https://urswilke.github.io/ggbenjamini/articles/create_benjamini_polygons.html","id":"polygons","dir":"Articles","previous_headings":"","what":"Polygons","title":"Create polygons from benjamini leaves","text":"want fill shapes color can first approximate bezier curves piecewise linear curves length n = 100 bezier. Furthermore, ’ll add simplex noise make look interesting: Now can plot ggplot2s geom_path() branch leaf stalks geom_polygon() 2 leaf halves.  look closely, ’ll see leaves cover leaf stalks branches. happens ggplot, first plot pathes polygons.","code":"df2 <- df_branches_and_leaves %>%   unite(idx, i_branch, i_leaf, element, remove = FALSE) %>%   bezier_to_polygon(idx, i_branch, i_leaf, element, i_part, n = 100) %>%    mutate(     x2 = x + gen_simplex(x, y, frequency = 0.05, seed = 123),     y2 = y + gen_simplex(x, y, frequency = 0.05, seed = 123)   ) ggplot(   data = df2 %>%      filter(str_detect(element, \"^half [12]$\")),   aes(x = x2, y = y2, group = idx, fill = factor(idx)) ) +    geom_path(     data = df2 %>%        filter(!str_detect(element, \"^half [12]$\")),      aes(x = x2, y = y2, group = idx),      show.legend = FALSE,      color = \"black\"   ) +   geom_polygon(show.legend = FALSE, color = \"black\") +   scale_y_reverse() +   theme_void()"},{"path":"https://urswilke.github.io/ggbenjamini/articles/import_svg_bezier.html","id":"load-the-skeleton-from-the-svg-file","dir":"Articles","previous_headings":"","what":"Load the skeleton from the svg file","title":"Import bezier pathes from svg files","text":"svg file included package serve skeleton branches ’ll grow leaves (file created inkscape transformed svgcairo needed format following code.). Let’s import :","code":"svg_skeleton <- system.file(\"extdata\", \"branch_skeleton.svg\", package = \"ggbenjamini\")"},{"path":"https://urswilke.github.io/ggbenjamini/articles/import_svg_bezier.html","id":"svg-beziers-to-dataframe","dir":"Articles","previous_headings":"","what":"svg beziers to dataframe","title":"Import bezier pathes from svg files","text":"Next ’ll load svg object extract bezier curves dataframe df_svg_skeleton: Looking geom_bezier() plot,  ’s needed, every second bezier pointing wrong direction bezier group indices important. Let’s correct :","code":"svg_doc <- parse_svg_doc(svg_skeleton)  # you can descend in the elements of the object and find the part you're # interested in. For this file we can extract our bezier pathes with: pathes <- svg_doc$child$g[[1]]$child$path  path_strings <- map_chr(pathes, ~.x$attribs$d)   df_raw <- tibble(s = path_strings) %>%   mutate(row = row_number()) %>%   # separate the 2 parts of each curve   separate_rows(s, sep = \"(?=[mMcC] )\") %>%   filter(s != \"\") %>%   separate(     s,      c(\"svg_point_type\", \"coords\"),      sep = \" \",     extra = \"merge\"   ) %>%   separate_rows(coords, sep = \" \") %>%   filter(coords != \"\") %>%   mutate(coords = as.numeric(coords)) %>%   mutate(i = ifelse(     row_number() %% 2 == 1,      \"x\",      \"y\"   )) %>%   pivot_wider(     values_from = coords,      names_from = i,      values_fn = list   ) %>%   unnest(c(x, y))  split_beziers <- function(df_bezier) {   if (nrow(df_bezier) > 4) {     n_others <- (nrow(df_bezier) - 4) / 3     other_rows <- map(       1:(n_others+1),        ~ 1:4 + (.x - 1) * 3     ) %>%        unlist()     res <- df_bezier[c(other_rows),] %>%        mutate(i_curve = rep(1:(n_others+1), each = 4))   }   if (nrow(df_bezier) == 4) {     res <- df_bezier   }   res }  (df_svg_skeleton <- df_raw %>%   group_by(row) %>%    summarise(split_beziers(cur_data())) ) #> # A tibble: 40 × 5 #> # Groups:   row [5] #>      row svg_point_type     x     y i_curve #>    <int> <chr>          <dbl> <dbl>   <int> #>  1     1 M               180.  230.       1 #>  2     1 C               158.  194.       1 #>  3     1 C               119.  221.       1 #>  4     1 C               120.  252.       1 #>  5     1 C               120.  252.       2 #>  6     1 C               119.  195.       2 #>  7     1 C               166.  165.       2 #>  8     1 C               185.  200.       2 #>  9     2 M               182.  163.       1 #> 10     2 C               160.  136.       1 #> # … with 30 more rows df_svg_skeleton %>%   # arrange(-row_number()) %>%   ggplot(     aes(       x,        y,        group = interaction(row, i_curve),        color = factor(row)     )   ) +   ggforce::geom_bezier(arrow = grid::arrow()) +    scale_y_reverse()"},{"path":"https://urswilke.github.io/ggbenjamini/articles/import_svg_bezier.html","id":"cleaning-up","dir":"Articles","previous_headings":"","what":"Cleaning up","title":"Import bezier pathes from svg files","text":"Now looks better.","code":"df_bezier_skeleton <- df_svg_skeleton %>%   group_by(row, i_curve) %>%   # correct direction of beziers with index i_curve == 1:   slice(ifelse(i_curve %% 2 == 1, 4:1, 1:4)) %>%    # get rid of the pairing indices of this svg file and replace with   # i_branch for each branch (only for clarity):   mutate(i_branch = cur_group_id()) %>%   ungroup() %>%   select(-row, -i_curve) %>%    relocate(i_branch) df_bezier_skeleton %>%   ggplot(     aes(       x,        y,       group = i_branch,       color = factor(i_branch)     )   ) +   ggforce::geom_bezier(arrow = grid::arrow()) +   scale_y_reverse()"},{"path":"https://urswilke.github.io/ggbenjamini/articles/import_svg_bezier.html","id":"usethisuse_data","dir":"Articles","previous_headings":"","what":"usethis::use_data()","title":"Import bezier pathes from svg files","text":"’ll store dataframe package.","code":"usethis::use_data(df_bezier_skeleton, overwrite = TRUE) #> ✔ Setting active project to '/home/runner/work/ggbenjamini/ggbenjamini' #> ✔ Saving 'df_bezier_skeleton' to 'data/df_bezier_skeleton.rda' #> • Document your data (see 'https://r-pkgs.org/data.html')"},{"path":"https://urswilke.github.io/ggbenjamini/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Urs Wilke. Author, maintainer.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilke U (2021). ggbenjamini: Generate ficus benjamina leaf shapes bezier curves. R package version 0.0.1.","code":"@Manual{,   title = {ggbenjamini: Generate ficus benjamina leaf shapes with bezier curves},   author = {Urs Wilke},   year = {2021},   note = {R package version 0.0.1}, }"},{"path":[]},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"generate-benjamini-leaves-with-bezier-curves","dir":"","previous_headings":"","what":"Generate benjamini leaves with bezier curves","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"goal package generate shapes form ficus benjamina leaves (weeping fig) bezier curves. heavily inspired awesome flametree package.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"can install newest version ggbenjamini github :","code":"# install.packages(\"remotes\") # (if not installed yet)  remotes::install_github(\"urswilke/ggbenjamini\")"},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"First load libraries:","code":"library(ggbenjamini) library(purrr) library(dplyr) library(tidyr) library(stringr) library(ggplot2) library(ggforce) set.seed(123)"},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"illustration-of-the-generated-data","dir":"","previous_headings":"","what":"Illustration of the generated data","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"package generates bezier curves imitate shape leaves ficus benjamini. main function benjamini_leaf(): Show generated dataframe df benjamini leaf bezier curve parameters  results dataframe multiple bezier curves representing shape leaf. first column element indicates part leaf bezier describes, can take values “stalk,” “half 2” “half 1.” i_part denotes id bezier curve, x & y point coordinates. column param_type denotes type point bezier curve. meaning best illustrated plot: Show code generate plot  black point represents leaf origin. Together blue points denote start/end points bezier curves, red dots positions control points. leaf cut two halves (element == \"half 1\" \"half 2\") lines i_part == 4 (represents midvein leaf). exact dimensions coordinates generated random numbers certain ranges (see definition argument leaf_params benjamini_leaf()).","code":"df <- benjamini_leaf() knitr::kable(df) # rearrange data to display segments: segments <- df %>%    select(-param_type) %>%    group_by(element, i_part) %>%    mutate(j = c(1, 2, 1, 2)) %>%   ungroup() %>%    pivot_wider(     names_from = j,     values_from = c(x, y),     values_fn = list   ) %>%    unnest(c(x_1, x_2, y_1, y_2))  p <- ggplot(df, aes(x = x, y = y)) +    geom_point(color = \"red\") +   geom_point(     data = df %>%        group_by(element, i_part) %>%        slice(c(1, 4)),     color = \"blue\",      size = 2   ) +   geom_point(     data = df %>% slice(1),      color = \"black\",      size = 3   ) +   geom_bezier(     aes(       group = interaction(element, i_part),        color = factor(i_part)     )) +   geom_segment(     data = segments,      aes(       x = x_1,        xend = x_2,        y = y_1,        yend = y_2     ),      linetype = \"dotted\",      color = \"red\"   ) +   coord_equal() +   theme_minimal()"},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"illustration-of-the-randomness","dir":"","previous_headings":"","what":"Illustration of the randomness","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"order show variations benjamini_leaf() (parameters explicitly specified), let’s pass position leaf origins let function randomly generate rest shapes:","code":"dfb <- expand_grid(     x = seq(0, 200, 50),     y = seq(25, 125, 25) ) %>%   transpose() %>%   map_dfr(     ~benjamini_leaf(gen_leaf_parameters(       x0 = .x$x,        y0 = .x$y     )),      .id = \"i_leaf\"   ) %>%   unite(i, i_leaf, i_part, element, remove = FALSE)  ggplot(dfb) +   geom_bezier(aes(x = x, y = y, group = i)) +   coord_equal() +   theme_minimal()"},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"branches","dir":"","previous_headings":"","what":"Branches","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"can also generate branches leaves command benjamini_branch() (see vignettes vignette(\"create_benjamini_polygons\") vignette(\"create_benjamini_tree\") examples): following plot also shows, benjamini_branch() adds another column i_leaf specifying index leaf branch.","code":"df_branch <- benjamini_branch() %>%   # we add a unique identifier `b` for all beziers:   unite(b, i_leaf, element, i_part, remove = FALSE)  df_branch #> # A tibble: 436 × 8 #>    b          i_leaf element i_part     x     y type        param_type     #>    <chr>       <dbl> <chr>    <dbl> <dbl> <dbl> <chr>       <chr>          #>  1 0_branch_1      0 branch       1  70    280  branch      bezier start … #>  2 0_branch_1      0 branch       1  84    245  branch      bezier contro… #>  3 0_branch_1      0 branch       1 126    217  branch      bezier contro… #>  4 0_branch_1      0 branch       1 168    217  branch      bezier end po… #>  5 1_stalk_0       1 stalk        0  75.7  269. leaf_bezier bezier start … #>  6 1_stalk_0       1 stalk        0  76.2  268. leaf_bezier bezier contro… #>  7 1_stalk_0       1 stalk        0  73.8  264  leaf_bezier bezier contro… #>  8 1_stalk_0       1 stalk        0  74.0  264. leaf_bezier bezier end po… #>  9 1_half 2_1      1 half 2       1  74.0  264. leaf_bezier bezier start … #> 10 1_half 2_1      1 half 2       1  71.4  264. leaf_bezier bezier contro… #> # … with 426 more rows df_branch %>%   ggplot() +   geom_bezier(aes(x = x, y = y, group = b, color = i_leaf)) +   coord_equal()"},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"polygons","dir":"","previous_headings":"","what":"Polygons","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"want fill leaves color, can use bezier_to_polygon() approximate bezier curves leaf parts polygons:  want know look vignette(\"create_benjamini_polygons\") .","code":"df_polygons <- df_branch %>%    filter(str_detect(element, \"^half [12]$\")) %>%   unite(idx, i_leaf, element, remove = FALSE) %>%   bezier_to_polygon(idx, i_leaf, element, i_part, n = 100) ggplot(   data = df_polygons,   aes(x = x, y = y, group = idx, fill = i_leaf) ) +   geom_polygon(show.legend = FALSE, color = \"black\") +   scale_fill_gradientn(colours = c(\"darkgreen\", \"green\")) +   theme_void()"},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"svg","dir":"","previous_headings":"","what":"svg","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"can also transform leaf data svgs. look vignette(\"create_benjamini_svg\") example generate svg images.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"r-packages-used","dir":"","previous_headings":"","what":"R packages used","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"package stands shoulders giants. possible thanks following libraries: base (R Core Team 2021a) pkgdown (Wickham Hesselberth 2020) stringr (Wickham 2019) dplyr (Wickham et al. 2021) ggplot2 (Wickham 2016) purrr (Henry Wickham 2020) tidyr (Wickham 2021) ggforce (Pedersen 2021) magrittr (Bache Wickham 2020) tibble (Müller Wickham 2021) rlang (Henry Wickham 2021) grid (R Core Team 2021b) prismatic (Hvitfeldt 2021) flametree (Navarro 2021) rsvg (Ooms 2021b) minisvg (FC 2021) knitr (Xie 2014) rmarkdown (Xie, Dervieux, Riederer 2020) testthat (Wickham 2011) vdiffr (Henry et al. 2021) ambient (Pedersen Peck 2020) covr (Hester 2020) usethis (Wickham, Bryan, Barrett 2021) stats (R Core Team 2021c) glue (Hester 2021) scales (Wickham Seidel 2020) magick (Ooms 2021a)","code":""},{"path":"https://urswilke.github.io/ggbenjamini/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Generate ficus benjamina leaf shapes with bezier curves","text":"Bache, Stefan Milton, Hadley Wickham. 2020. Magrittr: Forward-Pipe Operator r. https://CRAN.R-project.org/package=magrittr. FC, Mike. 2021. Minisvg: SVG Document Builder. Henry, Lionel, Thomas Lin Pedersen, T Jake Luciani, Matthieu Decorde, Vaudor Lise. 2021. Vdiffr: Visual Regression Testing Graphical Diffing. https://CRAN.R-project.org/package=vdiffr. Henry, Lionel, Hadley Wickham. 2020. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr. ———. 2021. Rlang: Functions Base Types Core r ’Tidyverse’ Features. https://CRAN.R-project.org/package=rlang. Hester, Jim. 2020. Covr: Test Coverage Packages. https://CRAN.R-project.org/package=covr. ———. 2021. Glue: Interpreted String Literals. https://CRAN.R-project.org/package=glue. Hvitfeldt, Emil. 2021. Prismatic: Color Manipulation Tools. https://CRAN.R-project.org/package=prismatic. Müller, Kirill, Hadley Wickham. 2021. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble. Navarro, Danielle. 2021. Flametree: Generate Random Tree-Like Images. https://CRAN.R-project.org/package=flametree. Ooms, Jeroen. 2021a. Magick: Advanced Graphics Image-Processing r. https://CRAN.R-project.org/package=magick. ———. 2021b. Rsvg: Render SVG Images PDF, PNG, PostScript, Bitmap Arrays. https://CRAN.R-project.org/package=rsvg. Pedersen, Thomas Lin. 2021. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce. Pedersen, Thomas Lin, Jordan Peck. 2020. Ambient: Generator Multidimensional Noise. https://CRAN.R-project.org/package=ambient. R Core Team. 2021a. R: Language Environment Statistical Computing. Vienna, Austria: R Foundation Statistical Computing. https://www.R-project.org/. ———. 2021b. R: Language Environment Statistical Computing. Vienna, Austria: R Foundation Statistical Computing. https://www.R-project.org/. ———. 2021c. R: Language Environment Statistical Computing. Vienna, Austria: R Foundation Statistical Computing. https://www.R-project.org/. Wickham, Hadley. 2011. “Testthat: Get Started Testing.” R Journal 3: 5–10. https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. ———. 2016. Ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org. ———. 2019. Stringr: Simple, Consistent Wrappers Common String Operations. https://CRAN.R-project.org/package=stringr. ———. 2021. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr. Wickham, Hadley, Jennifer Bryan, Malcolm Barrett. 2021. Usethis: Automate Package Project Setup. https://CRAN.R-project.org/package=usethis. Wickham, Hadley, Romain François, Lionel Henry, Kirill Müller. 2021. Dplyr: Grammar Data Manipulation. https://CRAN.R-project.org/package=dplyr. Wickham, Hadley, Jay Hesselberth. 2020. Pkgdown: Make Static HTML Documentation Package. https://CRAN.R-project.org/package=pkgdown. Wickham, Hadley, Dana Seidel. 2020. Scales: Scale Functions Visualization. https://CRAN.R-project.org/package=scales. Xie, Yihui. 2014. “Knitr: Comprehensive Tool Reproducible Research R.” Implementing Reproducible Computational Research, edited Victoria Stodden, Friedrich Leisch, Roger D. Peng. Chapman; Hall/CRC. http://www.crcpress.com/product/isbn/9781466561595. Xie, Yihui, Christophe Dervieux, Emily Riederer. 2020. R Markdown Cookbook. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown-cookbook.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a branch of benjamini leaves — benjamini_branch","title":"Generate a branch of benjamini leaves — benjamini_branch","text":"Generate branch benjamini leaves","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a branch of benjamini leaves — benjamini_branch","text":"","code":"benjamini_branch(   df_branch = tibble::tibble(x = c(70, 84, 126, 168), y = c(280, 245, 217, 217)),   leaf_mean_dist_approx = 10,   leaf_angle = 45,   first_dir = sample(0:1, 1),   leave_size_dist = spark_weibull(shape = 1.5, scale_factor = 0.8),   leaf_angle_dist = spark_norm(mean = 0, sd = 3),   last_angle_straight = TRUE,   leaf_size_multiplicator = 1 )"},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a branch of benjamini leaves — benjamini_branch","text":"df_branch dataframe containing 4 x & y bezier coordinates branch leaf_mean_dist_approx approximate distance two leaves leaf_angle angle leaf stalks branch first_dir direction first leaf branch (0 right; 1 left) leave_size_dist Manipulate sizes leaves spark function function returns function returns numerical vector length number leaves branch. function rescaled (divided maximum value). leaf_angle_dist Manipulate leaf angles spark function function returns function returns numerical vector length number leaves branch. last_angle_straight Logical angle last leaf branch sharp (defaults TRUE). leaf_size_multiplicator Multiply leaf size distribution factor.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a branch of benjamini leaves — benjamini_branch","text":"dataframe containing data leaves branch (see example).","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a branch of benjamini leaves — benjamini_branch","text":"","code":"benjamini_branch() %>%   tidyr::unite(b, i_part, i_leaf, element, remove = FALSE) %>%   ggplot2::ggplot() +   ggforce::geom_bezier(ggplot2::aes(x = x, y = y, group = b)) +   ggplot2::coord_equal()"},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_leaf.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bezier curve coordinates of a benjamini leaf — benjamini_leaf","title":"Generate bezier curve coordinates of a benjamini leaf — benjamini_leaf","text":"Generate bezier curve coordinates benjamini leaf","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_leaf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bezier curve coordinates of a benjamini leaf — benjamini_leaf","text":"","code":"benjamini_leaf(   leaf_params = gen_leaf_parameters(),   omega = 0,   xrot = leaf_params$x0,   yrot = leaf_params$y0,   precision = 2 )"},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_leaf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bezier curve coordinates of a benjamini leaf — benjamini_leaf","text":"leaf_params parameter control leaf shape omega rotation angle leaf xrot x coordinate pivot point (preset leaf origin). yrot x coordinate pivot point (preset leaf origin). precision numeric precision output","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_leaf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bezier curve coordinates of a benjamini leaf — benjamini_leaf","text":"dataframe conaining data bezier curves leaf (see example).","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/benjamini_leaf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate bezier curve coordinates of a benjamini leaf — benjamini_leaf","text":"","code":"df <- benjamini_leaf() df #> # A tibble: 36 × 5 #>    element i_part     x     y param_type             #>    <chr>    <dbl> <dbl> <dbl> <chr>                  #>  1 stalk        0  10    40   bezier start point     #>  2 stalk        0  10.0  40.8 bezier control point 1 #>  3 stalk        0  19.8  39.6 bezier control point 2 #>  4 stalk        0  20    40   bezier end point       #>  5 half 2       1  20    40   bezier start point     #>  6 half 2       1  23    34   bezier control point 1 #>  7 half 2       1  33    32.8 bezier control point 2 #>  8 half 2       1  37    33   bezier end point       #>  9 half 2       2  37    33   bezier start point     #> 10 half 2       2  41    33.2 bezier control point 1 #> # … with 26 more rows df %>%   # This generated a unique identifier for the 4 rows of each bezier curve:   tidyr::unite(b, element, i_part, remove = FALSE) %>%   ggplot2::ggplot() +   ggforce::geom_bezier(ggplot2::aes(x = x, y = y, group = b))"},{"path":"https://urswilke.github.io/ggbenjamini/reference/bezier_to_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform bezier dataframe to dataframe with path coordinates — bezier_to_polygon","title":"Transform bezier dataframe to dataframe with path coordinates — bezier_to_polygon","text":"Transform bezier dataframe dataframe path coordinates","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/bezier_to_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform bezier dataframe to dataframe with path coordinates — bezier_to_polygon","text":"","code":"bezier_to_polygon(df_benjamini_leaf, ..., n = 100)"},{"path":"https://urswilke.github.io/ggbenjamini/reference/bezier_to_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform bezier dataframe to dataframe with path coordinates — bezier_to_polygon","text":"df_benjamini_leaf Dataframe returned benjamini_leaf() ... grouping variables df_benjamini_leaf kept transformation. n number points per bezier","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/bezier_to_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform bezier dataframe to dataframe with path coordinates — bezier_to_polygon","text":"Dataframe coordinates bezier curve interpolations.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/bezier_to_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform bezier dataframe to dataframe with path coordinates — bezier_to_polygon","text":"","code":"df_coords <- benjamini_leaf() %>%   tidyr::unite(b, i_part, element, remove = FALSE) %>%   bezier_to_polygon(b, i_part, element) df_coords #> # A tibble: 900 × 5 #>    b       i_part element     x     y #>    <chr>    <dbl> <chr>   <dbl> <dbl> #>  1 0_stalk      0 stalk    10    40   #>  2 0_stalk      0 stalk    10.0  40.0 #>  3 0_stalk      0 stalk    10.0  40.0 #>  4 0_stalk      0 stalk    10.0  40.1 #>  5 0_stalk      0 stalk    10.1  40.1 #>  6 0_stalk      0 stalk    10.1  40.1 #>  7 0_stalk      0 stalk    10.1  40.1 #>  8 0_stalk      0 stalk    10.2  40.1 #>  9 0_stalk      0 stalk    10.2  40.2 #> 10 0_stalk      0 stalk    10.2  40.2 #> # … with 890 more rows df_coords %>%   ggplot2::ggplot(ggplot2::aes(x = x, y = y, group = element, fill = element)) +   ggplot2::geom_polygon()"},{"path":"https://urswilke.github.io/ggbenjamini/reference/df_bezier_skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Example bezier dataframe to grow leaves on — df_bezier_skeleton","title":"Example bezier dataframe to grow leaves on — df_bezier_skeleton","text":"Generated vignette(\"import_svg_bezier\")","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/df_bezier_skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example bezier dataframe to grow leaves on — df_bezier_skeleton","text":"","code":"df_bezier_skeleton"},{"path":"https://urswilke.github.io/ggbenjamini/reference/df_bezier_skeleton.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example bezier dataframe to grow leaves on — df_bezier_skeleton","text":"data frame 40 rows 4 variables: i_branch branch index svg_point_type original point type svg file x x coordinate y y coordinate","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bezier end points — gen_benjamini_points","title":"Generate bezier end points — gen_benjamini_points","text":"Generate bezier end points","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bezier end points — gen_benjamini_points","text":"","code":"gen_benjamini_points(leaf_params = gen_leaf_parameters())"},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bezier end points — gen_benjamini_points","text":"leaf_params parameters generated gen_leaf_parameters()","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bezier end points — gen_benjamini_points","text":"tibble absolute coordinates","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate bezier end points — gen_benjamini_points","text":"","code":"gen_benjamini_points() #> # A tibble: 5 × 2 #>       x     y #>   <dbl> <dbl> #> 1    10  40   #> 2    22  40   #> 3    37  31   #> 4    47  38.6 #> 5    51  40"},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_slopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bezier slopes coordinates — gen_benjamini_slopes","title":"Generate bezier slopes coordinates — gen_benjamini_slopes","text":"Generate bezier slopes coordinates","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_slopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bezier slopes coordinates — gen_benjamini_slopes","text":"","code":"gen_benjamini_slopes(leaf_params = gen_leaf_parameters())"},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_slopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bezier slopes coordinates — gen_benjamini_slopes","text":"leaf_params parameters generated gen_leaf_parameters()","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_slopes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bezier slopes coordinates — gen_benjamini_slopes","text":"dataframe sx1-4 x variable sy1-4 y variable","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_benjamini_slopes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate bezier slopes coordinates — gen_benjamini_slopes","text":"","code":"gen_benjamini_slopes() #> # A tibble: 5 × 2 #>        x      y #>    <dbl>  <dbl> #> 1 0.0193  0.646 #> 2 3      -5     #> 3 5      -0.219 #> 4 4       1.37  #> 5 0.152   0.618"},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_leaf_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bezier coordinates of a leaf — gen_leaf_parameters","title":"Generate bezier coordinates of a leaf — gen_leaf_parameters","text":"Except start point coordinates leaf origin x0 & y0 (arbitrarily set 10 40) coordinates relative origin. parameters random generated, except (e.g., close polygons, keep stalk mid vein line).","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_leaf_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bezier coordinates of a leaf — gen_leaf_parameters","text":"","code":"gen_leaf_parameters(   x0 = 10,   y0 = 40,   dx10 = sample(8:12, 1),   dy10 = 0,   dx21 = sample(12:20, 1),   dy21 = sample(-4:-10, 1),   dx32 = sample(10:18, 1),   dy32 = stats::runif(1, 0.92 * (-dy21 - 1), 0.95 * (-dy21 - 1)),   dx43 = sample(4:6, 1),   dy43 = y0 + dy10 + dy21 + dy32,   sx0 = stats::runif(1, 0, 0.1),   sx1 = sample(1:3, 1),   sx2 = sample(4:6, 1),   sx3 = sample(2:4, 1),   sx4 = stats::runif(1, 0, 0.2),   sy0 = stats::runif(1, 0.5, 1),   sy1 = sample(-4:-6, 1),   sy2 = stats::runif(1, -0.5, 0.5),   sy3 = stats::runif(1, 0.5, 1.5),   sy4 = stats::runif(1, 0.2, 0.7),   smx1 = sample(-5:-15, 1),   smx2 = sample(-5:-15, 1),   smy1 = stats::runif(1, -1, 1),   smy2 = stats::runif(1, -1, 1) )"},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_leaf_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bezier coordinates of a leaf — gen_leaf_parameters","text":"x0, y0 coordinates leaf origin dx10, dy10, dx21, dy21, dx32, dy32, dx43, dy43 coordinates bezier start & end points sx0, sx1, sx2, sx3, sx4 x coordinates control points sy0, sy1, sy2, sy3, sy4 y coordinates control points smx1, smx2, smy1, smy2 x & y coordinates mid vein control points","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_leaf_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bezier coordinates of a leaf — gen_leaf_parameters","text":"named list parameters","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_leaf_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate bezier coordinates of a leaf — gen_leaf_parameters","text":"","code":"gen_leaf_parameters() #> $x0 #> [1] 10 #>  #> $y0 #> [1] 40 #>  #> $dx10 #> [1] 8 #>  #> $dy10 #> [1] 0 #>  #> $dx21 #> [1] 15 #>  #> $dy21 #> [1] -10 #>  #> $dx32 #> [1] 12 #>  #> $dy32 #> [1] 8.380341 #>  #> $dx43 #> [1] 6 #>  #> $dy43 #> [1] 38.38034 #>  #> $sx0 #> [1] 0.03209339 #>  #> $sx1 #> [1] 2 #>  #> $sx2 #> [1] 4 #>  #> $sx3 #> [1] 3 #>  #> $sx4 #> [1] 0.06535212 #>  #> $sy0 #> [1] 0.5047668 #>  #> $sy1 #> [1] -4 #>  #> $sy2 #> [1] -0.1913522 #>  #> $sy3 #> [1] 1.220089 #>  #> $sy4 #> [1] 0.3680083 #>  #> $smx1 #> [1] -10 #>  #> $smx2 #> [1] -6 #>  #> $smy1 #> [1] -0.1643587 #>  #> $smy2 #> [1] -0.7920382 #>"},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_middle_line_slopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bezier slopes of the line in the middle of the leaf — gen_middle_line_slopes","title":"Generate bezier slopes of the line in the middle of the leaf — gen_middle_line_slopes","text":"Generate bezier slopes line middle leaf","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_middle_line_slopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bezier slopes of the line in the middle of the leaf — gen_middle_line_slopes","text":"","code":"gen_middle_line_slopes(leaf_params = gen_leaf_parameters())"},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_middle_line_slopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bezier slopes of the line in the middle of the leaf — gen_middle_line_slopes","text":"leaf_params parameters generated gen_leaf_parameters()","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_middle_line_slopes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bezier slopes of the line in the middle of the leaf — gen_middle_line_slopes","text":"dataframe containing coordinates two control points bezier curve defining midvein leaf.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/gen_middle_line_slopes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate bezier slopes of the line in the middle of the leaf — gen_middle_line_slopes","text":"","code":"gen_middle_line_slopes() #> # A tibble: 2 × 2 #>       x      y #>   <int>  <dbl> #> 1    -6  0.251 #> 2    -7 -0.738"},{"path":"https://urswilke.github.io/ggbenjamini/reference/get_one_bezier.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a dataframe of one bezier curve — get_one_bezier","title":"Generate a dataframe of one bezier curve — get_one_bezier","text":"Generate dataframe one bezier curve","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/get_one_bezier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a dataframe of one bezier curve — get_one_bezier","text":"","code":"get_one_bezier(i, points_df, slopes_df)"},{"path":"https://urswilke.github.io/ggbenjamini/reference/get_one_bezier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a dataframe of one bezier curve — get_one_bezier","text":"number bezier points_df dataframe generated gen_benjamini_points() (see example). slopes_df dataframe generated gen_benjamini_slopes() (see example).","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/get_one_bezier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a dataframe of one bezier curve — get_one_bezier","text":"dataframe containing information one bezier curve format needed ggforce::geom_bezier.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/get_one_bezier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a dataframe of one bezier curve — get_one_bezier","text":"","code":"set.seed(123) leaf_params <- gen_leaf_parameters() points_df <- gen_benjamini_points() slopes_df <- gen_benjamini_slopes() df_bezier <- get_one_bezier(1, points_df, slopes_df) ggplot2::ggplot(df_bezier, ggplot2::aes(x = x, y = y)) + ggforce::geom_bezier()"},{"path":"https://urswilke.github.io/ggbenjamini/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://urswilke.github.io/ggbenjamini/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate the angles of the leaves with a normal distribution — spark_norm","title":"Manipulate the angles of the leaves with a normal distribution — spark_norm","text":"function returns function returns numerical vector length number leaves branch.","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulate the angles of the leaves with a normal distribution — spark_norm","text":"","code":"spark_norm(mean = 0, sd = 3)"},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulate the angles of the leaves with a normal distribution — spark_norm","text":"mean, sd Parameters passed stats::dnorm().","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manipulate the angles of the leaves with a normal distribution — spark_norm","text":"dnorm() function n_leaves one arguments","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manipulate the angles of the leaves with a normal distribution — spark_norm","text":"","code":"spark_norm() #> function (n_leaves)  #> { #>     stats::rnorm(n_leaves, mean = mean, sd = sd) #> } #> <bytecode: 0x55cff6a237b0> #> <environment: 0x55cff57fdf48>"},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate the sizes of the leaves with a Weibull distribution — spark_weibull","title":"Manipulate the sizes of the leaves with a Weibull distribution — spark_weibull","text":"function returns function returns numerical vector length n_leaves, number leaves branch. values serve relative multiplication factors sizes leaves branch. (maximum value distribution normalized 1.)","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulate the sizes of the leaves with a Weibull distribution — spark_weibull","text":"","code":"spark_weibull(shape = 1.2, scale_factor = 0.5)"},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulate the sizes of the leaves with a Weibull distribution — spark_weibull","text":"shape, scale_factor Parameters passed stats::dweibull().","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manipulate the sizes of the leaves with a Weibull distribution — spark_weibull","text":"dweibull() function depending n_leaves one arguments","code":""},{"path":"https://urswilke.github.io/ggbenjamini/reference/spark_weibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manipulate the sizes of the leaves with a Weibull distribution — spark_weibull","text":"","code":"#Mark the two consecutive pairs of parentheses: spark_weibull()(n_leaves = 10) #>  [1] 1.0000000 0.9517662 0.8377380 0.7097325 0.5867500 0.4765146 0.3816251 #>  [8] 0.3021437 0.2368941 0.1841649"}]
